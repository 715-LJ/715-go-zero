// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package user

import (
	"context"

	"Ningxi-Compose/usermanage/rpc/types/client"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginRequest    = client.LoginRequest
	RegisterRequest = client.RegisterRequest
	Response        = client.Response
	UserinfoRequest = client.UserinfoRequest

	User interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error)
		Userinfo(ctx context.Context, in *UserinfoRequest, opts ...grpc.CallOption) (*Response, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	client := client.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error) {
	client := client.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Userinfo(ctx context.Context, in *UserinfoRequest, opts ...grpc.CallOption) (*Response, error) {
	client := client.NewUserClient(m.cli.Conn())
	return client.Userinfo(ctx, in, opts...)
}
